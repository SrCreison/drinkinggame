// server.js
// Este √© o n√∫cleo do nosso jogo, lidando com toda a l√≥gica e comunica√ß√£o em tempo real.

const express = require('express');
const http = require('http');
const socketIo = require('socket.io');

const app = express();
const server = http.createServer(app);
const io = socketIo(server);

const PORT = process.env.PORT || 3000;

// Serve os arquivos HTML, CSS e JS do diret√≥rio 'public'
app.use(express.static('public'));

// --- Estado do Jogo ---
// Vamos armazenar todos os dados do jogo na mem√≥ria para simplificar.
let players = [];
let currentPlayerIndex = 0;
let gameInProgress = false;
let lastCard = null;

// --- O "Baralho do Perigo" ---
// √â aqui que a m√°gica acontece. Adicione quantas cartas criativas,
// engra√ßadas ou "perigosas" voc√™ conseguir imaginar!
const cardDeck = [
    // Cartas Cl√°ssicas
    { title: "Social", description: "Todos bebem!" },
    { title: "Cascata", description: "Todos come√ßam a beber. Voc√™ n√£o pode parar at√© que a pessoa que comprou a carta pare." },
    { title: "Mestre das Regras", description: "Crie uma nova regra. A regra dura at√© que esta carta seja comprada novamente. Quem quebr√°-la, bebe." },
    { title: "Mestre das Perguntas", description: "Voc√™ √© o Mestre das Perguntas at√© esta carta ser comprada novamente. Se algu√©m responder a uma pergunta sua, essa pessoa bebe." },
    { title: "Mestre do Ded√£o", description: "Voc√™ √© o Mestre do Ded√£o. Quando voc√™ colocar seu ded√£o na mesa, todos os outros jogadores devem fazer o mesmo. O √∫ltimo a fazer, bebe." },
    { title: "Rima", description: "Diga uma palavra. O pr√≥ximo jogador deve dizer uma palavra que rime. O primeiro a falhar, bebe." },
    { title: "D√™ Dois, Tome Dois", description: "Voc√™ deve beber duas doses e pode dar duas doses para qualquer jogador(es)." },
    { title: "Desafio ou Dose", description: "Cumpra um desafio criado pelo grupo, ou tome uma dose/vire sua bebida." },
    { title: "V√≠rus", description: "Voc√™ tem o V√≠rus. Se voc√™ falar com outro jogador e ele responder, ele agora tamb√©m tem o V√≠rus. Quem tem o V√≠rus bebe se falar. O comprador da carta √© curado quando a pr√≥xima carta for comprada." },
    { title: "Escolha Algu√©m", description: "Escolha uma pessoa para beber." },
    { title: "C√©u", description: "Aponte para o c√©u! O √∫ltimo jogador a fazer isso, bebe." },
    { title: "Parceiro", description: "Escolha um 'parceiro'. Pelo resto do jogo, sempre que voc√™ tiver que beber, ele tamb√©m ter√° que beber (e vice-versa)." },
    { title: "Modo Sil√™ncio", description: "Ningu√©m pode falar. O primeiro a falar, bebe. O sil√™ncio √© quebrado quando a pr√≥xima carta for comprada." },
    { title: "Contador de Hist√≥rias", description: "Comece uma hist√≥ria com uma frase. O pr√≥ximo jogador adiciona uma frase. O primeiro a hesitar ou errar a hist√≥ria, bebe." },
    { title: "O Imitador", description: "Escolha outro jogador para imitar. Voc√™ deve agir como ele at√© sua pr√≥xima vez. Se sair do personagem, voc√™ bebe." },
    { title: "Categorias Tem√°ticas", description: "Escolha uma categoria espec√≠fica (ex: 'Marcas de carro com a letra F', 'Personagens de Simpsons'). Em c√≠rculo, cada um nomeia um item. O primeiro a falhar ou repetir, bebe." },
    { title: "Quem tem mais chance de...", description: "Fa√ßa uma pergunta 'Quem tem mais chance de...' (ex: '...ir para um reality show?'). O grupo aponta para algu√©m. A pessoa mais votada bebe." },
    { title: "Eu Nunca... ", description: "Diga algo que voc√™ nunca fez (ex: 'Eu nunca fingi estar doente para faltar no trabalho'). Quem J√Å fez, bebe 2 doses." },
    { title: "O Fil√≥sofo", description: "Fa√ßa uma pergunta pol√™mica (ex: 'O ovo veio antes da galinha?'). Todos devem dar sua opini√£o. A pior resposta, na opini√£o da maioria, bebe." },
    { title: "Regra do Mindinho", description: "At√© a sua pr√≥xima vez, todos s√≥ podem beber segurando o copo com o dedo mindinho levantado. Quem esquecer, bebe." },
    { title: "Piadista", description: "Conte uma piada. Se ningu√©m rir, voc√™ bebe. Se pelo menos uma pessoa rir, voc√™ escolhe duas pessoas para beberem." },
    { title: "Coringa", description: "Guarde esta carta. Voc√™ pode us√°-la a qualquer momento para anular uma regra que te faria beber e passar a dose para outra pessoa." },
    { title: "Troca de Lugar", description: "Escolha outro jogador para trocar de lugar com voc√™. Voc√™s tamb√©m trocam o que estiverem bebendo." }
];


// --- L√≥gica em Tempo Real com Socket.io ---
io.on('connection', (socket) => {
    console.log(`Um usu√°rio conectou: ${socket.id}`);

    // Quando um jogador entra no jogo
    socket.on('joinGame', ({ playerName }) => {
        if (players.find(p => p.id === socket.id)) {
            return; // Jogador j√° est√° no jogo
        }
        const newPlayer = {
            id: socket.id,
            name: playerName,
        };
        players.push(newPlayer);
        console.log(`${playerName} entrou no jogo.`);

        // Se for o primeiro jogador, inicia o jogo
        if (players.length === 1) {
            gameInProgress = true;
            currentPlayerIndex = 0;
        }
        
        // Informa ao novo jogador seu pr√≥prio ID
        socket.emit('selfJoined', { selfId: socket.id });

        // Transmite o estado atualizado do jogo para todos os jogadores
        broadcastGameState();
    });

    // Quando o jogador atual compra uma carta
    socket.on('drawCard', () => {
        const player = players.find(p => p.id === socket.id);
        if (!player || !gameInProgress || players[currentPlayerIndex].id !== socket.id) {
            // N√£o √© a vez deste jogador ou o jogo n√£o est√° rolando
            return;
        }

        // Compra uma carta aleat√≥ria
        const card = cardDeck[Math.floor(Math.random() * cardDeck.length)];
        lastCard = card;

        // Passa para o pr√≥ximo jogador
        currentPlayerIndex = (currentPlayerIndex + 1) % players.length;

        console.log(`${player.name} comprou: ${card.title}`);
        broadcastGameState();
    });

    // Quando um jogador desconecta
    socket.on('disconnect', () => {
        console.log(`Um usu√°rio desconectou: ${socket.id}`);
        const disconnectedPlayerIndex = players.findIndex(p => p.id === socket.id);

        if (disconnectedPlayerIndex !== -1) {
            players.splice(disconnectedPlayerIndex, 1);

            if (players.length === 0) {
                // Se n√£o houver mais jogadores, reseta o jogo
                gameInProgress = false;
                currentPlayerIndex = 0;
                lastCard = null;
                console.log("Todos os jogadores sa√≠ram. Jogo resetado.");
            } else {
                // Ajusta o √≠ndice do jogador atual se necess√°rio
                if (currentPlayerIndex >= players.length) {
                    currentPlayerIndex = 0;
                }
            }
            // Atualiza todo mundo
            broadcastGameState();
        }
    });
});

// Fun√ß√£o auxiliar para enviar o estado atual para todos os clientes
function broadcastGameState() {
    const gameState = {
        players: players,
        currentPlayerId: gameInProgress ? players[currentPlayerIndex].id : null,
        lastCard: lastCard,
        gameInProgress: gameInProgress
    };
    io.emit('updateGameState', gameState);
}


server.listen(PORT, () => {
    console.log(`üçª Servidor Baralho do Perigo est√° rodando em http://localhost:${PORT}`);
});
